@page "/AutPage"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorWAemail.Client.Services

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject GetUserRolesService GetUserRolesService


<h3>Sign in</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (authState?.User?.Identity?.IsAuthenticated ?? false)
{
    if (loadRolesError)
    {
        <div style="color: red">Failed to load user roles.</div>
    }
    <h5>User Roles:</h5>
    <table class="table">
        <thead>
            <tr>
                <th>Role Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var role in userRoles)
            {
                <tr>
                    <td>@role</td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="LogoutAllDevices" class="btn btn-primary">Logoff All Devices</button>
    <button @onclick="LogoutThisDevice" class="btn btn-secondary">Logoff only this browser</button>
}
else
{
    <EditForm Model="emailModel" OnValidSubmit="SendCodeAsync">
        <div class="mb-2">
            <InputText @bind-Value="emailModel.Email" placeholder="Enter your email" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Send code</button>
    </EditForm>
    @if (codeSent)
    {
        <EditForm Model="codeModel" OnValidSubmit="VerifyCodeAsync">
            <div class="mb-2">
                <InputText @bind-Value="codeModel.Code" placeholder="Enter code" class="form-control" />
            </div>
            <button type="submit" class="btn btn-success">Sign in</button>
        </EditForm>
    }
    <div style="color: green">@message</div>
}

@code {
    private AuthenticationState? authState;
    private bool isLoading = true;
    private List<string> userRoles = new();

    private EmailModel emailModel = new();
    private CodeModel codeModel = new();
    private string? message;
    private bool codeSent = false;
    private bool loadRolesError = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAuthStateAsync();
    }

private async Task RefreshAuthStateAsync()
{
    isLoading = true;
    loadRolesError = false;
    authState = await AuthStateProvider.GetAuthenticationStateAsync();

    if (authState.User.Identity?.IsAuthenticated ?? false)
    {
        try
        {
           userRoles = await GetUserRolesService.GetRolesAsync();
        }
        catch (Exception ex)
        {
            userRoles.Clear();
            loadRolesError = true;
        }
    }
    isLoading = false;
    StateHasChanged();
}

    private async Task SendCodeAsync()
    {
        message = null;
        var result = await AuthService.SendCodeAsync(emailModel.Email);
        if (result)
        {
            codeSent = true;
            message = "Verification code sent to your email.";
        }
        else
        {
            message = "Failed to send verification code.";
        }
    }

    private async Task VerifyCodeAsync()
    {
        message = null;
        var authResult = await AuthService.VerifyCodeAsync(emailModel.Email, codeModel.Code);
        if (authResult != null && !string.IsNullOrWhiteSpace(authResult.Token))
        {
            // Save token to localStorage
            await JS.InvokeVoidAsync("localStorage.setItem", "authToken", authResult.Token);

            // Notify authentication provider
            if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
            {
                await customProvider.MarkUserAsAuthenticated(authResult.Token);
            }

            message = $"Sign in success. Welcome, {authResult.Email}";
            codeSent = false;
            emailModel = new();
            codeModel = new();

            await RefreshAuthStateAsync();
        }
        else
        {
            message = "Incorrect code or code expired.";
        }
    }

    private async Task LogoutAllDevices() =>
        await AuthService.FullLogoutAllDevicesAsync(AuthStateProvider)
                         .ContinueWith(_ => Navigation.NavigateTo("/", true));

    private async Task LogoutThisDevice() =>
        await AuthService.LocalLogoutAsync(AuthStateProvider)
                         .ContinueWith(_ => Navigation.NavigateTo("/", true));

    public class EmailModel
    {
        public string? Email { get; set; }
    }
    public class CodeModel
    {
        public string? Code { get; set; }
    }
}
